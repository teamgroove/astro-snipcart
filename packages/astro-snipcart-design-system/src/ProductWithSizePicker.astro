---
import { Element, SnipcartProduct, buildCustomFieldAttributes, buildAttributes, SnipcartProductWithProductMeta } from '@lloydjatkinson/astro-snipcart';
import Stack from './Stack.astro';
import ExperimentalStack from './ExperimentalStack.astro';
import Button from './Button.astro';
import Text from './Text.astro';
import { Img } from "astro-imagetools/components";

export type Props = Element & SnipcartProduct & SnipcartProductWithProductMeta & {
    readonly sizes: readonly string[];
    readonly variants: readonly string[];
 
}

const {
    as: Element = 'div',
    id,
    artist,
    name,
    price,
    url,
    description,
    image,
    categories = [],
    metadata,
    fileGuid,
    quantity,
    minimumQuantity,
    maximumQuantity,
    quantityStep,
    dimensions,
    customFields = [],
    stackable,
    shippable,
    taxable,
    taxes,
    hasTaxesIncluded,
    sizes,
    variants: variants,
additionalImages
} = Astro.props as Props;

const myvariants = variants.map(variant => variant.name || variant)
// const myadditionalImages = additionalImages.map(image.path => 'https://gaga/'+image.path || variant)
const updatedImg = {
  ...additionalImages,
  additionalImages: additionalImages.map(image => ({
    ...image,
    path: `https://nocodb.canvasart.design/${image.path}`
  }))
};

const myadditionalImages = additionalImages.map(image => ({
    ...image,
    path: `https://nocodb.canvasart.design/${image.path}`
  }))
const attributes = buildAttributes({
    id,
    artist,
    name,
    price,
    url,
    description,
    image,
    categories,
    metadata,
    fileGuid,
    quantity,
    minimumQuantity,
    maximumQuantity,
    quantityStep,
    dimensions,
    customFields,
    stackable,
    shippable,
    taxable,
    taxes,
    hasTaxesIncluded
});
---
<div x-data=`{ sizes: ${JSON.stringify(sizes)}, selected: '${sizes[0]}', variant_selected: '${myvariants[0]}'}`>
    <!-- <Stack
    direction="horizontal"
    wrap="wrap"
    gap={{
        mobile: 'small',
        tablet: 'small',
        desktop: 'small'
    }}>
    {
        myadditionalImages && myadditionalImages.map((element) => (
        <div class="border border-black px-4 py-2 flex flex-1 items-center justify-center cursor-pointer outline-none ring-0">   
        <Img src={ element.path } alt=""/>                      
        </div> 
        ))
    }
    </Stack> -->
    <Stack
        gap={{
        mobile: 'small',
        tablet: 'small',
        desktop: 'small'
    }}>
        <fieldset class="mt-2">
            <legend class="sr-only">Choose a size</legend>
            <Stack
                direction="horizontal"
                wrap="wrap"
                gap={{
                    mobile: 'small',
                    tablet: 'small',
                    desktop: 'small'
                }}>
                    {
                        sizes.map((name) => (
                            <label
                                class="border border-black px-4 py-2 flex flex-1 items-center justify-center cursor-pointer outline-none ring-0"
                                :class={ `selected === '${name}' ? 'bg-neutral-200' : '' `}>
                                <input
                                    type="radio"
                                    name="size-choice"
                                    value={ name }
                                    class="sr-only"
                                    x-model="selected">
                                <p class="sr-only">{ name }</p>
                                <Text as="span">
                                    { name }
                                </Text>
                            </label>
                        ))
                        
                        
                        
                    }
                    
   yo

                                      {
                                        myvariants.map((name) => (
                                            <label
                                                class="border border-black px-4 py-2 flex flex-1 items-center justify-center cursor-pointer outline-none ring-0"
                                                :class={ `variant_selected === '${name}' ? 'bg-neutral-200' : '' `}>
                                                <input
                                                    type="radio"
                                                    name="variant-choice"
                                                    value={ name }
                                                    class="sr-only"
                                                    x-model="variant_selected">
                                                <p class="sr-only">{ name }</p>
                                                <Text as="span">
                                                    { name }
                                                </Text>
                                            </label>
                                        ))
                                    }
            </Stack>
        </fieldset>



        <Element
            class="snipcart-add-item"
            { ...attributes }
            {
                ...buildCustomFieldAttributes([
                    {
                        name: 'Size',
                        options: sizes,
                        value: sizes[0],
                    }
                ]) 
            }
            :data-item-custom1-value="selected">
            
            <Button fullWidth>
            Buy
            </Button>
        </Element>
    </Stack>
</div>